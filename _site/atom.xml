<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>Chris Continaza</title>
 <link href="http://.com/atom.xml" rel="self"/>
 <link href="http://tom.preston-werner.com/"/>
 <updated>2013-05-28T20:15:36-07:00</updated>
 <id>http://chriscontinanza.com/</id>
 <author>
   <name>Chris Continanza</name>
   <email>chris@chriscontinanza.com</email>
 </author>

 
 <entry>
   <title>Heroku Deploy Visualizer</title>
   <link href="http://chriscontinanza.com/2013/05/29/Heroku-Deploys.html"/>
   <updated>2013-05-29T00:00:00-07:00</updated>
   <id>http://chriscontinanza.com/2013/05/29/Heroku-Deploys</id>
   <content type="html">&lt;h1 id='heroku_deploy_visualizer'&gt;Heroku Deploy Visualizer&lt;/h1&gt;

&lt;h2 id='another_exercise_in_ambient_awareness'&gt;An(other) exercise in Ambient Awareness&lt;/h2&gt;

&lt;p&gt;For my last trick I built an &lt;a href='/2013/05/26/Heroku-Outage-Lights.html'&gt;Outage Lights&lt;/a&gt; system to make it plainly obvious whenever we were having an outage. However, one thing I always disliked about this system is that although it is continually working, we (hopefully) rarely see it in action. So I set my sights on building something that could visualize an activity that we actually wanted happening.&lt;/p&gt;

&lt;p&gt;The fundamental unit at Heroku is the application. Some thoughts included blinking an LED whenever someone creates an app, or perhaps showing an app counter. However, creating an app on Heroku is so easy and quick it only encapsulates that first moment of inspiration. I wanted to show something even more meaningful and quickly realized that it wasn&amp;#8217;t creations, but deploys, that are the sign of people doing real work on the platform.&lt;/p&gt;

&lt;p&gt;Ok, so with the event (deploys) in mind I now needed a way to visualize it. Blinking an LED could work, but is &lt;em&gt;quite&lt;/em&gt; subtle and would require a lengthy explanation to make it apparent. I needed something more visceral. There must be an LED display compatible with Arduino. Sure enough, &lt;a href='http://adafruit.com/products/555'&gt;there is&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Not only does adafruit sell these LED matrices, but they are chainable! On top of that, they have an Arduino Library that makes interfacing as simple as:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='c++'&gt;&lt;span class='c1'&gt;// LED Matrix Library&lt;/span&gt;
&lt;span class='cp'&gt;#include &amp;quot;HT1632.h&amp;quot;&lt;/span&gt;

&lt;span class='c1'&gt;// LED Matrix Pins&lt;/span&gt;
&lt;span class='cp'&gt;#define DATA 2&lt;/span&gt;
&lt;span class='cp'&gt;#define WR   3&lt;/span&gt;
&lt;span class='cp'&gt;#define CS   4&lt;/span&gt;

&lt;span class='c1'&gt;//Led Matrix Controller&lt;/span&gt;
&lt;span class='n'&gt;HT1632LEDMatrix&lt;/span&gt; &lt;span class='n'&gt;matrix&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;HT1632LEDMatrix&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;DATA&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;WR&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;CS&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;

&lt;span class='kt'&gt;void&lt;/span&gt; &lt;span class='nf'&gt;setup&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
  &lt;span class='c1'&gt;//center cursor&lt;/span&gt;
  &lt;span class='n'&gt;matrix&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;setCursor&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;4&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
  &lt;span class='c1'&gt;//print to LED matrix&lt;/span&gt;
  &lt;span class='n'&gt;matrix&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;print&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;Hello, world&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id='system_design'&gt;System Design&lt;/h2&gt;

&lt;p&gt;The goal of this system is to display a Heroku app name whenever that app is deployed to the platform. I needed to subscribe to an internal Pusher Feed of app events. I filter the stream for deploy events and push those events into a &lt;a href='http://redis.io'&gt;redis&lt;/a&gt; queue. The Arduino makes requests over HTTP for a comma-separated list of app names which are built by popping N items from the queue.&lt;/p&gt;

&lt;p&gt;For the CS nerds out there, this is a basic producer-consumer relationship. The pusher feed is the producer; the arduino the consumer.&lt;/p&gt;

&lt;p&gt;Here&amp;#8217;s a high-level description:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Arduino Microcontroller&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href='https://www.sparkfun.com/products/9026'&gt;Ethernet Shield&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;6 &lt;a href='http://adafruit.com/products/555'&gt;16X24 LED Matrices&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href='https://www.sparkfun.com/products/298'&gt;9V Power Supply&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;a href='https://github.com/csquared/deploy-viz'&gt;Web App&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1 Web Process for Arduino Requests&lt;/li&gt;

&lt;li&gt;1 Background Process to consume event feed&lt;/li&gt;

&lt;li&gt;1 Redis instance to store the app name queue&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id='the_web_app'&gt;The Web App&lt;/h2&gt;

&lt;p&gt;The web app uses Redis and the &lt;code&gt;pusher-client&lt;/code&gt; gem to do most of the heavy lifting.&lt;/p&gt;

&lt;h3 id='the__process'&gt;The &lt;code&gt;firehose&lt;/code&gt; process.&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;Firehose&lt;/code&gt; class is a simple wrapper around the &lt;code&gt;pusher-client&lt;/code&gt; for parsing a JSON feed. It is defined in &lt;code&gt;firehose.rb&lt;/code&gt; and allows me to register a callback that is executed for every event. For simplicity&amp;#8217;s sake, the callback is defined in the bin script itself:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='ruby'&gt;&lt;span class='c1'&gt;#!/usr/bin/env ruby&lt;/span&gt;

&lt;span class='n'&gt;require_relative&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;../firehose&amp;quot;&lt;/span&gt;
&lt;span class='n'&gt;require_relative&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;../deploys&amp;quot;&lt;/span&gt;

&lt;span class='no'&gt;BLACKLIST&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='no'&gt;ENV&lt;/span&gt;&lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;BLACKLIST&amp;#39;&lt;/span&gt;&lt;span class='o'&gt;]&lt;/span&gt; &lt;span class='o'&gt;||&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;split&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='no'&gt;PUSHER_CREDS&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
  &lt;span class='ss'&gt;channel&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='no'&gt;ENV&lt;/span&gt;&lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;PUSHER_CHANNEL&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;]&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
  &lt;span class='ss'&gt;key&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;     &lt;span class='no'&gt;ENV&lt;/span&gt;&lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;PUSHER_KEY&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;]&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
  &lt;span class='ss'&gt;secret&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;  &lt;span class='no'&gt;ENV&lt;/span&gt;&lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;PUSHER_SECRET&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;]&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;

&lt;span class='no'&gt;Firehose&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;new&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='no'&gt;PUSHER_CREDS&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='k'&gt;do&lt;/span&gt; &lt;span class='o'&gt;|&lt;/span&gt;&lt;span class='n'&gt;data&lt;/span&gt;&lt;span class='o'&gt;|&lt;/span&gt;
  &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='n'&gt;data&lt;/span&gt;&lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='ss'&gt;:action&lt;/span&gt;&lt;span class='o'&gt;]&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;deploy-app&amp;#39;&lt;/span&gt;
    &lt;span class='nb'&gt;name&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;data&lt;/span&gt;&lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='ss'&gt;:target&lt;/span&gt;&lt;span class='o'&gt;]&lt;/span&gt;
    &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='no'&gt;BLACKLIST&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;find&lt;/span&gt;&lt;span class='p'&gt;{&lt;/span&gt; &lt;span class='o'&gt;|&lt;/span&gt;&lt;span class='n'&gt;string&lt;/span&gt;&lt;span class='o'&gt;|&lt;/span&gt; &lt;span class='nb'&gt;name&lt;/span&gt; &lt;span class='o'&gt;=~&lt;/span&gt; &lt;span class='sr'&gt;/^&lt;/span&gt;&lt;span class='si'&gt;#{&lt;/span&gt;&lt;span class='n'&gt;string&lt;/span&gt;&lt;span class='si'&gt;}&lt;/span&gt;&lt;span class='sr'&gt;/&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt;
      &lt;span class='nb'&gt;puts&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;BLACKLIST: &lt;/span&gt;&lt;span class='si'&gt;#{&lt;/span&gt;&lt;span class='nb'&gt;name&lt;/span&gt;&lt;span class='si'&gt;}&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;&lt;/span&gt;
    &lt;span class='k'&gt;else&lt;/span&gt;
      &lt;span class='nb'&gt;puts&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;DEPLOY: &lt;/span&gt;&lt;span class='si'&gt;#{&lt;/span&gt;&lt;span class='nb'&gt;name&lt;/span&gt;&lt;span class='si'&gt;}&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;&lt;/span&gt;
      &lt;span class='no'&gt;Deploys&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;add&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nb'&gt;name&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
    &lt;span class='k'&gt;end&lt;/span&gt;
  &lt;span class='k'&gt;end&lt;/span&gt;
&lt;span class='k'&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;BLACKLIST&lt;/code&gt; env var lets me filter certain apps we&amp;#8217;re constantly deploying as health checks. When the &lt;code&gt;action&lt;/code&gt; key in the payload matches the string &lt;code&gt;deploy-app&lt;/code&gt;, we&amp;#8217;re in business. The name of the app is stored in the &lt;code&gt;target&lt;/code&gt; key. The &lt;code&gt;Deploys::add&lt;/code&gt; call adds the app name to the queue in Redis.&lt;/p&gt;

&lt;h3 id='the__process'&gt;The &lt;code&gt;web&lt;/code&gt; process.&lt;/h3&gt;

&lt;p&gt;Because we&amp;#8217;re only assuming one consumer, the web process is dead simple:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='ruby'&gt;&lt;span class='nb'&gt;require&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;sinatra&amp;#39;&lt;/span&gt;
&lt;span class='n'&gt;require_relative&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;./deploys&amp;#39;&lt;/span&gt;

&lt;span class='n'&gt;set&lt;/span&gt; &lt;span class='ss'&gt;:port&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='no'&gt;ENV&lt;/span&gt;&lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;PORT&amp;#39;&lt;/span&gt;&lt;span class='o'&gt;]&lt;/span&gt; &lt;span class='o'&gt;||&lt;/span&gt; &lt;span class='mi'&gt;3000&lt;/span&gt;

&lt;span class='n'&gt;get&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;*&amp;#39;&lt;/span&gt; &lt;span class='k'&gt;do&lt;/span&gt;
  &lt;span class='no'&gt;Deploys&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;get&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='no'&gt;ENV&lt;/span&gt;&lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;MAX_DEPLOYS&amp;#39;&lt;/span&gt;&lt;span class='o'&gt;]&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;join&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='k'&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That&amp;#8217;s it! &lt;code&gt;Deploys::get&lt;/code&gt; pops the next N names from the queue. We just join them with a comma and ship them back to the arduino.&lt;/p&gt;

&lt;h2 id='the_arduino_program'&gt;The Arduino Program&lt;/h2&gt;

&lt;p&gt;For the arduino, we just poll the server for the comma-separated list and write the app name to the LED Matrix. The most efficient way to do this is to build up an &lt;code&gt;app_name&lt;/code&gt; variable with each character of the string. When we see a comma, we write the app to the LED matrix, clear out the app_name, and start building the next string.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='c++'&gt;&lt;span class='c1'&gt;//Variables for loop()&lt;/span&gt;
&lt;span class='n'&gt;String&lt;/span&gt; &lt;span class='n'&gt;response&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='n'&gt;String&lt;/span&gt; &lt;span class='n'&gt;app_name&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;

&lt;span class='kt'&gt;void&lt;/span&gt; &lt;span class='nf'&gt;loop&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
  &lt;span class='n'&gt;response&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;

  &lt;span class='c1'&gt;//connect to HTTP&lt;/span&gt;
  &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;heroku&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;get&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='o'&gt;&amp;amp;&lt;/span&gt;&lt;span class='n'&gt;response&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;){&lt;/span&gt;
    &lt;span class='n'&gt;app_name&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;

    &lt;span class='k'&gt;for&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;i&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='n'&gt;i&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&lt;/span&gt; &lt;span class='n'&gt;response&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;length&lt;/span&gt;&lt;span class='p'&gt;();&lt;/span&gt; &lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='o'&gt;++&lt;/span&gt;&lt;span class='p'&gt;){&lt;/span&gt;
      &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;response&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;charAt&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='sc'&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;){&lt;/span&gt;
        &lt;span class='n'&gt;Serial&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;print&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;Print: &amp;quot;&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
        &lt;span class='n'&gt;Serial&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;println&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;app_name&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
        &lt;span class='n'&gt;matrix&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;clearScreen&lt;/span&gt;&lt;span class='p'&gt;();&lt;/span&gt;
        &lt;span class='n'&gt;matrix&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;setCursor&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;x_offset&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;y_offset&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
        &lt;span class='n'&gt;matrix&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;print&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;app_name&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
        &lt;span class='n'&gt;matrix&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;writeScreen&lt;/span&gt;&lt;span class='p'&gt;();&lt;/span&gt;
        &lt;span class='n'&gt;app_name&lt;/span&gt;  &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
        &lt;span class='n'&gt;delay&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;display_length_millis&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
      &lt;span class='p'&gt;}&lt;/span&gt;&lt;span class='k'&gt;else&lt;/span&gt;&lt;span class='p'&gt;{&lt;/span&gt;
        &lt;span class='n'&gt;app_name&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;concat&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;response&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;charAt&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='p'&gt;));&lt;/span&gt;
      &lt;span class='p'&gt;}&lt;/span&gt;
    &lt;span class='p'&gt;}&lt;/span&gt;
  &lt;span class='p'&gt;}&lt;/span&gt;&lt;span class='k'&gt;else&lt;/span&gt;&lt;span class='p'&gt;{&lt;/span&gt;
    &lt;span class='c1'&gt;//wait before next attempt to connect&lt;/span&gt;
    &lt;span class='n'&gt;delay&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;display_length_millis&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
  &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id='were_gonna_need_a_bigger_boat'&gt;We&amp;#8217;re gonna need a bigger boat&lt;/h3&gt;

&lt;p&gt;The real issue I ran into was the &lt;a href='https://github.com/adafruit/HT1632'&gt;LED Driver lib&lt;/a&gt; only supporting 4 matrices. It was truncating a decent number of app names, so I &lt;a href='https://github.com/csquared/HT1632/commit/a27df6a48359f0f9e27060e7eee4b40649aeefa0#L0L52'&gt;decided to add support for more matrices by just hacking the lib I had cloned&lt;/a&gt;. However, it turns out &lt;a href='https://github.com/adafruit/HT1632/pull/2'&gt;I wasn&amp;#8217;t the first person to think of this&lt;/a&gt;. Given the state of that pull request, I decided not to issue one for my changes.&lt;/p&gt;

&lt;h2 id='putting_it_all_together'&gt;Putting it all together&lt;/h2&gt;

&lt;p&gt;Here you can see the Deploy Visualizer installed in the office:&lt;/p&gt;

&lt;p&gt;These techniques could easily be extended to make the LED matrix display other sources of data such as tweets or text messages, which is left as an excercise for the reader. Happy hacking!&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>The Heroku Outage Lights System</title>
   <link href="http://chriscontinanza.com/2013/05/26/Heroku-Outage-Lights.html"/>
   <updated>2013-05-26T00:00:00-07:00</updated>
   <id>http://chriscontinanza.com/2013/05/26/Heroku-Outage-Lights</id>
   <content type="html">&lt;h1 id='the_heroku_outage_lights_system'&gt;The Heroku Outage Lights System&lt;/h1&gt;

&lt;h2 id='an_exercise_in_ambient_awareness'&gt;An exercise in Ambient Awareness&lt;/h2&gt;

&lt;p&gt;Heroku offers the power of UNIX in a cloud platform. With great power comes great responsiblity - we are responsible for running millions of our users&amp;#8217; web applications.&lt;/p&gt;

&lt;p&gt;All distributed systems are subject to failure and we are no exception. Sometimes systems can automatically recover. However, sometimes they cannot. Its the latter class of failures that require people to be aware and on-call. Someone getting a page, while it creates a sense of urgency in the person being paged, doesn&amp;#8217;t really do much for anyone else.&lt;/p&gt;

&lt;p&gt;Monitoring is also a crucial piece of awareness. There are large screens around the office with graphs showing inbound traffic, database read and write performance, and all forms of integers and floats being graphed live. In addition to raw numbers, we have a particularly well-designed and informative &lt;a href='http://status.heroku.com'&gt;Status Site&lt;/a&gt; that can summarize the plaform status into a simple red, green, or yellow.&lt;/p&gt;

&lt;p&gt;However, we can&amp;#8217;t spend all day staring at graphs, waiting for something to go wrong. What we were missing was the &amp;#8220;fire alarm&amp;#8221;: the giant red light that means shit is currently hitting the fan.&lt;/p&gt;

&lt;h3 id='aruduino_to_the_rescue'&gt;Aruduino to the rescue&lt;/h3&gt;

&lt;p&gt;To bridge that gap, I built an Arduino-based lighting system that paints the office red whenever our status site is red (reporting an outage). It includes its own monitoring and leverages as much of the platform as possible.&lt;/p&gt;

&lt;p&gt;Painting the office red involves a simple mechanism: a power strip that is connected to a very special power cord. What makes the power cord special is that it is operated by a 5 Volt relay - making it an electronic switch controllable by the arduino.&lt;/p&gt;
&lt;img src='https://a248.e.akamai.net/camo.github.com/f967e976f641fc3e4f321bc3f0cffbbf60603979/687474703a2f2f692e696d6775722e636f6d2f52583642642e6a7067' width='300' /&gt;
&lt;p&gt;So simple enough. Hook up the lights to the power strip, the power strip to the special cord, the special cord to the arduino, the arduino to an ethernet shield, some magic happens, aaaand monitoring! Simple.&lt;/p&gt;

&lt;p&gt;On its third iteration, the current outage light system consists of 3 components:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The actual lighting setup&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;four &amp;#8220;wall washers&amp;#8221;&lt;/li&gt;

&lt;li&gt;one airstrip hazard lamp&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;An Arduino, with an ethernet shield, on the office network.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href='https://www.sparkfun.com/products/10747'&gt;Powertail II&lt;/a&gt; to control a power strip&lt;/li&gt;

&lt;li&gt;&lt;a href='https://gist.github.com/csquared/4341720'&gt;Custom software on the arduino&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;a href='https://gist.github.com/csquared/4341720'&gt;A Heroku app&lt;/a&gt; with 2 processes&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;a &lt;code&gt;web&lt;/code&gt; process with 2 endpoints:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;one that serves the platform status to the arduino&lt;/li&gt;

&lt;li&gt;one that serves the system status to the Heroku employees&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;a &lt;code&gt;monitor&lt;/code&gt; process that alerts the system operator via email if the outage lights themselves are down&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id='the_arduino_program'&gt;The Arduino program&lt;/h2&gt;

&lt;p&gt;The Arduino presented a few constraints: I had to use a raw HTTP endpoint (no ssl). Also, the Arduino&amp;#8217;s &lt;code&gt;EthernetClient&lt;/code&gt; is a byte-level interface. The program has been through a few iterations. On the current one I&amp;#8217;ve &lt;a href='http://github.com/csquared/arduino-http'&gt;written my own http library&lt;/a&gt;. The lib sets the &lt;code&gt;Host&lt;/code&gt; header for you, which Heroku uses to determine which app you are requesting. I&amp;#8217;m also using a Basic Auth header as a lightweight way of keeping people honest.&lt;/p&gt;

&lt;h3 id='connecting_to_heroku_from_an_arduino_ethernet_shield'&gt;Connecting to Heroku from an Arduino Ethernet Shield&lt;/h3&gt;

&lt;p&gt;Here&amp;#8217;s a snippet of the Arduino program that connects to Heroku.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='c++'&gt;&lt;span class='c1'&gt;//boolean flag&lt;/span&gt;
&lt;span class='n'&gt;status_on&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nb'&gt;false&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;

&lt;span class='n'&gt;HTTP&lt;/span&gt; &lt;span class='n'&gt;heroku&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;HTTP&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;outage-lights.herokuapp.com&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;

&lt;span class='c1'&gt;// Make an HTTP request:&lt;/span&gt;
&lt;span class='kt'&gt;char&lt;/span&gt;&lt;span class='o'&gt;*&lt;/span&gt; &lt;span class='n'&gt;auth_header&lt;/span&gt;&lt;span class='p'&gt;[]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;Authorization: Basic &amp;lt;REDACTED&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;};&lt;/span&gt;
&lt;span class='n'&gt;String&lt;/span&gt; &lt;span class='n'&gt;response&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;

&lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;heroku&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;get&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;/status&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;auth_header&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='o'&gt;&amp;amp;&lt;/span&gt;&lt;span class='n'&gt;response&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
  &lt;span class='n'&gt;http_failures&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
  &lt;span class='n'&gt;Serial&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;println&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;response&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
  &lt;span class='n'&gt;Serial&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;println&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;response&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;indexOf&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;red&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;));&lt;/span&gt;

  &lt;span class='c1'&gt;// If its red, turn the switch on.&lt;/span&gt;
  &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;response&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;indexOf&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;red&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;){&lt;/span&gt;
    &lt;span class='n'&gt;Serial&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;println&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;Status clear - LED OFF&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
  &lt;span class='p'&gt;}&lt;/span&gt;
  &lt;span class='k'&gt;else&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
    &lt;span class='n'&gt;Serial&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;println&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;Status red! - LED ON&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
    &lt;span class='n'&gt;status_on&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nb'&gt;true&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
  &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='k'&gt;else&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
  &lt;span class='c1'&gt;//count failures cus you didn&amp;#39;t get a connection to the server&lt;/span&gt;
  &lt;span class='n'&gt;http_failures&lt;/span&gt;&lt;span class='o'&gt;++&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
  &lt;span class='n'&gt;Serial&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;println&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;connection to status failed&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Another limitation of the Arduino is that strings must be less that 1024KB in length. This meant truncation for any large JSON packets, so having my own endpoint that returns a body of &lt;code&gt;red&lt;/code&gt; or &lt;code&gt;green&lt;/code&gt; is perfect for the Arduino.&lt;/p&gt;

&lt;h3 id='the_heroku_app__watching_the_watchers'&gt;The Heroku App - watching the watchers&lt;/h3&gt;

&lt;p&gt;The lights controller is pretty cool, but how would I know when the Arduino fails?&lt;/p&gt;

&lt;p&gt;Clearly, the outage lights need their own monitoring system.&lt;/p&gt;

&lt;p&gt;Originally the arduino connected to separate endpoints for consuming status and POSTing heartbeats. When we started using our own app to serve the red/green status, it made sense to use those requests for the heartbeat as well.&lt;/p&gt;

&lt;p&gt;The way it works now is that when every &lt;code&gt;/status&lt;/code&gt; request comes in, a key in redis gets set (via &lt;code&gt;Arduino.heartbeat&lt;/code&gt;) with an expiration (default 10 seconds, configurable by ENV var).&lt;/p&gt;

&lt;p&gt;This enables us to check if requests have come in during the last ten seconds by simply checking on the presence of this key.&lt;/p&gt;

&lt;h4 id='statusheartbeat_endpoint_for_the_arduino'&gt;Status/Heartbeat Endpoint for the Arduino&lt;/h4&gt;

&lt;p&gt;The following Sinatra endpoint implements returning the string &lt;code&gt;red&lt;/code&gt; or &lt;code&gt;green&lt;/code&gt; when status is red or green and also sets the Redis key used for monitoring the system.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='ruby'&gt;&lt;span class='k'&gt;class&lt;/span&gt; &lt;span class='nc'&gt;Status&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&lt;/span&gt; &lt;span class='ss'&gt;Sinatra&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='ss'&gt;:Base&lt;/span&gt;
  &lt;span class='n'&gt;use&lt;/span&gt; &lt;span class='ss'&gt;Rack&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='ss'&gt;:Auth&lt;/span&gt;&lt;span class='o'&gt;::&lt;/span&gt;&lt;span class='no'&gt;Basic&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;Restricted Area&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='o'&gt;&amp;amp;&lt;/span&gt;&lt;span class='no'&gt;BASIC_AUTH&lt;/span&gt;

  &lt;span class='n'&gt;get&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;*&amp;#39;&lt;/span&gt; &lt;span class='k'&gt;do&lt;/span&gt;
    &lt;span class='n'&gt;red&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='kp'&gt;true&lt;/span&gt;
    &lt;span class='c1'&gt;# Let&amp;#39;s us trigger a &amp;quot;red&amp;quot; response by setting a config var for testing&lt;/span&gt;
    &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='no'&gt;ENV&lt;/span&gt;&lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;FIREDRILL&amp;#39;&lt;/span&gt;&lt;span class='o'&gt;]&lt;/span&gt;
      &lt;span class='vg'&gt;$stdout&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;puts&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;firedrill=true &amp;quot;&lt;/span&gt;
    &lt;span class='k'&gt;else&lt;/span&gt;
      &lt;span class='c1'&gt;# Assume we&amp;#39;re up!&lt;/span&gt;
      &lt;span class='no'&gt;Arduino&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;heartbeat&lt;/span&gt;
      &lt;span class='k'&gt;begin&lt;/span&gt;
        &lt;span class='c1'&gt;# Connect to status&lt;/span&gt;
        &lt;span class='n'&gt;url&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='no'&gt;ENV&lt;/span&gt;&lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;STATUS_URL&amp;#39;&lt;/span&gt;&lt;span class='o'&gt;]&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
        &lt;span class='n'&gt;result&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='no'&gt;Excon&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;get&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;url&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;body&lt;/span&gt;
        &lt;span class='vg'&gt;$stdout&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;puts&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;url=&lt;/span&gt;&lt;span class='si'&gt;#{&lt;/span&gt;&lt;span class='n'&gt;url&lt;/span&gt;&lt;span class='si'&gt;}&lt;/span&gt;&lt;span class='s2'&gt; result=&lt;/span&gt;&lt;span class='si'&gt;#{&lt;/span&gt;&lt;span class='n'&gt;result&lt;/span&gt;&lt;span class='si'&gt;}&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;&lt;/span&gt;
        &lt;span class='n'&gt;red&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;result&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;empty?&lt;/span&gt; &lt;span class='o'&gt;||&lt;/span&gt; &lt;span class='no'&gt;JSON&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;parse&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;result&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;status&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;].&lt;/span&gt;&lt;span class='n'&gt;values&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;include?&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;red&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;))&lt;/span&gt;
      &lt;span class='k'&gt;rescue&lt;/span&gt; &lt;span class='no'&gt;Exception&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='n'&gt;e&lt;/span&gt;
        &lt;span class='nb'&gt;puts&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;Error connecting to status &lt;/span&gt;&lt;span class='si'&gt;#{&lt;/span&gt;&lt;span class='n'&gt;e&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;message&lt;/span&gt;&lt;span class='si'&gt;}&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;&lt;/span&gt;
      &lt;span class='k'&gt;end&lt;/span&gt;
    &lt;span class='k'&gt;end&lt;/span&gt;
    &lt;span class='n'&gt;status&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;red&lt;/span&gt; &lt;span class='p'&gt;?&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;red&amp;#39;&lt;/span&gt; &lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;green&amp;#39;&lt;/span&gt;
    &lt;span class='vg'&gt;$stdout&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;puts&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;status=&lt;/span&gt;&lt;span class='si'&gt;#{&lt;/span&gt;&lt;span class='n'&gt;status&lt;/span&gt;&lt;span class='si'&gt;}&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;&lt;/span&gt;
    &lt;span class='n'&gt;status&lt;/span&gt;
  &lt;span class='k'&gt;end&lt;/span&gt;
&lt;span class='k'&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id='monitor_the_system_for_the_peoples'&gt;Monitor the System for the Peoples&lt;/h3&gt;

&lt;p&gt;The following Sinatra endpoint serves an html page that indicates whether the lights are working or not.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='ruby'&gt;  &lt;span class='n'&gt;get&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;/&amp;#39;&lt;/span&gt; &lt;span class='k'&gt;do&lt;/span&gt;
    &lt;span class='vi'&gt;@color&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='no'&gt;Arduino&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;up?&lt;/span&gt; &lt;span class='p'&gt;?&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;green&amp;#39;&lt;/span&gt; &lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;red&amp;#39;&lt;/span&gt;
    &lt;span class='n'&gt;erb&lt;/span&gt; &lt;span class='ss'&gt;:index&lt;/span&gt;
  &lt;span class='k'&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If the key is set, the Outage Lights system is up, and &lt;code&gt;Arduino.up?&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;. If that key is not set, the Outage Lights system is not up, and &lt;code&gt;Arduino.up?&lt;/code&gt; returns false.&lt;/p&gt;

&lt;p&gt;in &lt;code&gt;views/index.erb&lt;/code&gt;&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='html'&gt;&lt;span class='cp'&gt;&amp;lt;!doctype&amp;gt;&lt;/span&gt;
&lt;span class='nt'&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class='nt'&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class='nt'&gt;&amp;lt;style &lt;/span&gt;&lt;span class='na'&gt;type=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;text/css&amp;quot;&lt;/span&gt;&lt;span class='nt'&gt;&amp;gt;&lt;/span&gt;
      &lt;span class='nt'&gt;body&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
        &lt;span class='k'&gt;height&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='m'&gt;100&lt;/span&gt;&lt;span class='o'&gt;%&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
        &lt;span class='k'&gt;width&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='m'&gt;100&lt;/span&gt;&lt;span class='o'&gt;%&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
        &lt;span class='k'&gt;background-color&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;%=&lt;/span&gt; &lt;span class='o'&gt;@&lt;/span&gt;&lt;span class='k'&gt;color&lt;/span&gt; &lt;span class='o'&gt;%&amp;gt;&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
      &lt;span class='p'&gt;}&lt;/span&gt;
    &lt;span class='nt'&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
    &lt;span class='nt'&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Monitoring the Monitor Lights!&lt;span class='nt'&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class='nt'&gt;&amp;lt;script &lt;/span&gt;&lt;span class='na'&gt;type=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt;&lt;span class='nt'&gt;&amp;gt;&lt;/span&gt;
      &lt;span class='nx'&gt;setTimeout&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;window.location.reload()&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;10000&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
    &lt;span class='nt'&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class='nt'&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class='nt'&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class='nt'&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class='nt'&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We now have a simple web frontend (&lt;a href='https://github.com/csquared/sinatra-google-auth'&gt;protected via google auth&lt;/a&gt;) that lets us know the status of the Outage Lights system.&lt;/p&gt;

&lt;p&gt;We also have a monitor process that checks the status and alerts me via email if the lights are ever down.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='ruby'&gt;&lt;span class='c1'&gt;# monitor.rb -- run with `ruby monitor.rb`&lt;/span&gt;

&lt;span class='nb'&gt;require&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;./env&amp;#39;&lt;/span&gt;

&lt;span class='kp'&gt;loop&lt;/span&gt; &lt;span class='k'&gt;do&lt;/span&gt;
  &lt;span class='nb'&gt;sleep&lt;/span&gt; &lt;span class='no'&gt;ENV&lt;/span&gt;&lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;MONITOR_INTERVAL&amp;#39;&lt;/span&gt;&lt;span class='o'&gt;].&lt;/span&gt;&lt;span class='n'&gt;to_i&lt;/span&gt;
  &lt;span class='k'&gt;unless&lt;/span&gt; &lt;span class='no'&gt;Arduino&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;up?&lt;/span&gt;
    &lt;span class='no'&gt;Mail&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;deliver&lt;/span&gt; &lt;span class='k'&gt;do&lt;/span&gt;
      &lt;span class='n'&gt;from&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;heartbeat-monitor&amp;#39;&lt;/span&gt;
      &lt;span class='n'&gt;to&lt;/span&gt;   &lt;span class='no'&gt;ENV&lt;/span&gt;&lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;MONITOR_EMAIL&amp;#39;&lt;/span&gt;&lt;span class='o'&gt;]&lt;/span&gt;
      &lt;span class='n'&gt;subject&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;Outage Lights Down&amp;#39;&lt;/span&gt;
      &lt;span class='n'&gt;body&lt;/span&gt;    &lt;span class='no'&gt;Time&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;now&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;to_s&lt;/span&gt;
    &lt;span class='k'&gt;end&lt;/span&gt;
  &lt;span class='k'&gt;end&lt;/span&gt;
&lt;span class='k'&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With those in place, we have a monitoring system for the Outage Lights system! A way to watch the watchers, if you will. The &lt;a href='https://github.com/csquared/heartbeat-monitor'&gt;Heroku app&lt;/a&gt; is a simple &lt;code&gt;Rack&lt;/code&gt; app composed of two &lt;code&gt;Sinatra&lt;/code&gt; apps. Its pretty thoroughly Unit tested and relatively undocumented.&lt;/p&gt;

&lt;h2 id='putting_it_together'&gt;Putting it together&lt;/h2&gt;
&lt;img src='http://f.cl.ly/items/2D3f2P0E0f072W0P1Z3M/photo.JPG' width='400px' /&gt;
&lt;p&gt;The light system on with our status site red in the background.&lt;/p&gt;
&lt;img src='http://f.cl.ly/items/0P2R251b24410n2U1w0T/lights2.jpeg' width='400px' /&gt;
&lt;p&gt;Stairwell light- this is a former Runway light from San Francisco International Airport.&lt;/p&gt;

&lt;p&gt;This system, besides being fun to design and build, allows us to have a more visceral connection to our status site. Using these techniques (and lifting the code), you can leverage the power of the cloud in your physical world. Happy Hacking!&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>IMGKit 1.3 Released!</title>
   <link href="http://chriscontinanza.com/2011/06/20/IMGKit-1.3.html"/>
   <updated>2011-06-20T00:00:00-07:00</updated>
   <id>http://chriscontinanza.com/2011/06/20/IMGKit-1.3</id>
   <content type="html">&lt;h1 id='imgkit_13_released'&gt;IMGKit 1.3 Released!&lt;/h1&gt;

&lt;p&gt;I&amp;#8216;ve &lt;a href='http://www.github.com/csquared/IMGKit'&gt;released a new version of the IMGKit gem&lt;/a&gt; that incorporates some enhancements that while alone may not warrant discussion, taken together add some well-tested new functionality.&lt;/p&gt;

&lt;h2 id='moar_formats'&gt;Moar Formats&lt;/h2&gt;

&lt;p&gt;I&amp;#8216;d always felt a shortcoming of the gem was that it artificially restricted results to the JPG format. Although this format makes sense for the majority of cases, I had some requests for supporting the other formats.&lt;/p&gt;

&lt;p&gt;It turned out that passing the &lt;code&gt;--format&lt;/code&gt; flag was always a possiblity, but I wanted something more ruby-like. Specificially, I created a group of &lt;code&gt;#to_&amp;lt;format&amp;gt;&lt;/code&gt; methods for jpgs, pngs, and tiffs.&lt;/p&gt;

&lt;h2 id='encodings_oh_my'&gt;Encodings? Oh my!&lt;/h2&gt;

&lt;p&gt;A big part of adding the to_format methods was how I was going to be able to test it. I opted to write a matcher that uses the magic number (first 4 bytes) of the data to determine its format. This way, I can test the generated data itself and not just that all the right method calls happened.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='ruby'&gt;&lt;span class='k'&gt;module&lt;/span&gt; &lt;span class='nn'&gt;MagicNumber&lt;/span&gt;
  &lt;span class='kp'&gt;extend&lt;/span&gt; &lt;span class='nb'&gt;self&lt;/span&gt;
  &lt;span class='no'&gt;JPG&lt;/span&gt;  &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;&lt;/span&gt;&lt;span class='se'&gt;\xFF\xD8\xFF\xE0&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;&lt;/span&gt;
  &lt;span class='no'&gt;JPEG&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='no'&gt;JPG&lt;/span&gt;
  &lt;span class='no'&gt;PNG&lt;/span&gt;  &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;&lt;/span&gt;&lt;span class='se'&gt;\x89\x50\x4e\x47&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;&lt;/span&gt;
  &lt;span class='no'&gt;TIFF&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;&lt;/span&gt;&lt;span class='se'&gt;\x49\x49\x2a\x00&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;&lt;/span&gt;
  &lt;span class='no'&gt;TIF&lt;/span&gt;  &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='no'&gt;TIFF&lt;/span&gt;
  &lt;span class='no'&gt;GIF&lt;/span&gt;  &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;&lt;/span&gt;&lt;span class='se'&gt;\x47\x49\x46\x38&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;&lt;/span&gt;


  &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;respond_to?&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='ss'&gt;:force_encoding&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; 
    &lt;span class='nb'&gt;constants&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;each&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt; &lt;span class='o'&gt;|&lt;/span&gt;&lt;span class='n'&gt;c&lt;/span&gt;&lt;span class='o'&gt;|&lt;/span&gt; &lt;span class='nb'&gt;const_get&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;c&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;force_encoding&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;ASCII-8BIT&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;  &lt;span class='p'&gt;}&lt;/span&gt;
  &lt;span class='k'&gt;end&lt;/span&gt;

  &lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='nf'&gt;read&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;string&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
    &lt;span class='n'&gt;string&lt;/span&gt;&lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='mi'&gt;4&lt;/span&gt;&lt;span class='o'&gt;]&lt;/span&gt;
  &lt;span class='k'&gt;end&lt;/span&gt;
&lt;span class='k'&gt;end&lt;/span&gt;

&lt;span class='ss'&gt;RSpec&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='ss'&gt;:Matchers&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;define&lt;/span&gt; &lt;span class='ss'&gt;:be_a&lt;/span&gt; &lt;span class='k'&gt;do&lt;/span&gt; &lt;span class='o'&gt;|&lt;/span&gt;&lt;span class='n'&gt;expected&lt;/span&gt;&lt;span class='o'&gt;|&lt;/span&gt;
  &lt;span class='n'&gt;match&lt;/span&gt; &lt;span class='k'&gt;do&lt;/span&gt; &lt;span class='o'&gt;|&lt;/span&gt;&lt;span class='n'&gt;actual&lt;/span&gt;&lt;span class='o'&gt;|&lt;/span&gt;
    &lt;span class='vi'&gt;@expected&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='no'&gt;MagicNumber&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;const_get&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;expected&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;to_s&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;upcase&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
    &lt;span class='no'&gt;MagicNumber&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;read&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;actual&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='vi'&gt;@expected&lt;/span&gt;
  &lt;span class='k'&gt;end&lt;/span&gt;

  &lt;span class='n'&gt;failure_message_for_should&lt;/span&gt; &lt;span class='k'&gt;do&lt;/span&gt; &lt;span class='o'&gt;|&lt;/span&gt;&lt;span class='n'&gt;actual&lt;/span&gt;&lt;span class='o'&gt;|&lt;/span&gt;
    &lt;span class='n'&gt;actual&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='no'&gt;MagicNumber&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;read&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;actual&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
    &lt;span class='s2'&gt;&amp;quot;expctected &lt;/span&gt;&lt;span class='si'&gt;#{&lt;/span&gt;&lt;span class='n'&gt;actual&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;inspect&lt;/span&gt;&lt;span class='si'&gt;}&lt;/span&gt;&lt;span class='s2'&gt;,&lt;/span&gt;&lt;span class='si'&gt;#{&lt;/span&gt;&lt;span class='n'&gt;actual&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;encoding&lt;/span&gt;&lt;span class='si'&gt;}&lt;/span&gt;&lt;span class='s2'&gt; to equal &lt;/span&gt;&lt;span class='si'&gt;#{&lt;/span&gt;&lt;span class='vi'&gt;@expected&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;inspect&lt;/span&gt;&lt;span class='si'&gt;}&lt;/span&gt;&lt;span class='s2'&gt;,&lt;/span&gt;&lt;span class='si'&gt;#{&lt;/span&gt;&lt;span class='vi'&gt;@expected&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;encoding&lt;/span&gt;&lt;span class='si'&gt;}&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;&lt;/span&gt;
  &lt;span class='k'&gt;end&lt;/span&gt;
&lt;span class='k'&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I can then use these in a test as:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='ruby'&gt;  &lt;span class='no'&gt;IMGKit&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;new&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;Hello, world&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;to_img&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;should&lt;/span&gt; &lt;span class='n'&gt;be_a&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='ss'&gt;:jpg&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Things were looking pretty good until I ran the actual tests under Ruby 1.9. In MRI Ruby 1.9, the string encoding was causing the string comparison in the matcher to fail! The strings in the MagicNumber class were being treated as ASCII-8BIT, whereas the strings representing the image data were UTF-8.&lt;/p&gt;

&lt;p&gt;At first, I coded a solution that allowed the image&amp;#8216;s binary data to get coerced into a UTF-8 string. However, this is not the type of data that is being represented. Encoding the binary string returned by &lt;code&gt;#to_img&lt;/code&gt; as UTF-8 is the wrong fit and only creates the kind of weird equality bug I was seeing. ASCII-8BIT is the encoding type for binary data, so I explicity coerce to and test for this encoding.&lt;/p&gt;

&lt;h2 id='moar_compatibility'&gt;Moar Compatibility&lt;/h2&gt;

&lt;p&gt;However, the string coercision code could possibly introduce compatibilities with other rubies. RVM to the rescue!&lt;/p&gt;

&lt;p&gt;RVM has a feature that allows you to run specs under multiple different versions of Ruby:&lt;/p&gt;
&lt;code&gt;
specs      - runs 'rake spec' across selected ruby versions 
&lt;/code&gt;
&lt;p&gt;so with the following runner:&lt;/p&gt;
&lt;code&gt;
rvm 1.9.2\@imgkit_devel,1.8.7\@imgkit specs
&lt;/code&gt;
&lt;p&gt;I can ensure compatibility with earlier Ruby!&lt;/p&gt;

&lt;h2 id='real_error_messages'&gt;Real Error Messages&lt;/h2&gt;

&lt;p&gt;Lastly, I got a useful commit from &lt;a href='https://twitter.com/#!/koudelka'&gt;@kouldelka&lt;/a&gt; that actually raises an error if the wkhtmltoimage command fails.&lt;/p&gt;

&lt;h2 id='conclusion'&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I hope these changes make using IMGKit more fun and reliable!&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Transitioning my Jekyll site to Heroku (Rack)</title>
   <link href="http://chriscontinanza.com/2011/06/15/Jekyll-to-heroku.html"/>
   <updated>2011-06-15T00:00:00-07:00</updated>
   <id>http://chriscontinanza.com/2011/06/15/Jekyll-to-heroku</id>
   <content type="html">&lt;h1 id='transitioning_my_jekyll_site_to_heroku_rack'&gt;Transitioning my Jekyll site to Heroku (Rack)&lt;/h1&gt;

&lt;p&gt;&lt;a href='https://github.com/mojombo/jekyll/wiki'&gt;Jekyll&lt;/a&gt; is mojombo&amp;#8216;s awesome and popular blogging platform for hackers. I transitioned my site to use it over Wordpress a while ago and haven&amp;#8216;t looked back.&lt;/p&gt;

&lt;p&gt;Jekyll generates a static html site from templates you create with liquid and markdown. Usually, the generated site is .gitignored and is regenerated on every deploy. This works great for static site hosts, but what about Heroku?&lt;/p&gt;

&lt;p&gt;The strategy is easier than it seems. We can still generate the static site, but we remove the &lt;code&gt;_site&lt;/code&gt; dir from our &lt;code&gt;.gitignore.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;At first I installed the rack-jekyll gem, noticed a wierd problem with my pngs. It turned out that the rack-jekyll gem rolled its own static-site serving code that fucks up pngs.&lt;/p&gt;

&lt;p&gt;It turns out if you instead use the rack-contribs gem you can use Rack to serve a static site.&lt;/p&gt;

&lt;p&gt;Here&amp;#8216;s my config.ru:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='ruby'&gt;&lt;span class='nb'&gt;require&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;bundler&amp;#39;&lt;/span&gt;
&lt;span class='no'&gt;Bundler&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;setup&lt;/span&gt;
&lt;span class='no'&gt;Bundler&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;require&lt;/span&gt;
&lt;span class='nb'&gt;require&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;rack/contrib/try_static&amp;#39;&lt;/span&gt;

&lt;span class='n'&gt;use&lt;/span&gt; &lt;span class='ss'&gt;Rack&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='ss'&gt;:TryStatic&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
    &lt;span class='ss'&gt;:root&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;_site&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;  &lt;span class='c1'&gt;# static files root dir&lt;/span&gt;
    &lt;span class='ss'&gt;:urls&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='sx'&gt;%w[/]&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;     &lt;span class='c1'&gt;# match all requests&lt;/span&gt;
    &lt;span class='ss'&gt;:try&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;.html&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;index.html&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;/index.html&amp;#39;&lt;/span&gt;&lt;span class='o'&gt;]&lt;/span&gt; &lt;span class='c1'&gt;# try these postfixes sequentially&lt;/span&gt;
&lt;span class='c1'&gt;# otherwise 404 NotFound&lt;/span&gt;
&lt;span class='n'&gt;run&lt;/span&gt; &lt;span class='nb'&gt;lambda&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt; &lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='mi'&gt;404&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;Content-Type&amp;#39;&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;text/html&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;},&lt;/span&gt; &lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;whoops! Not Found&amp;#39;&lt;/span&gt;&lt;span class='o'&gt;]]&lt;/span&gt;&lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And Gemfile:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='ruby'&gt;&lt;span class='n'&gt;source&lt;/span&gt; &lt;span class='ss'&gt;:gemcutter&lt;/span&gt;
&lt;span class='n'&gt;gem&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;jekyll&amp;#39;&lt;/span&gt;
&lt;span class='n'&gt;gem&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;rack-contrib&amp;#39;&lt;/span&gt;
&lt;span class='n'&gt;gem&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;heroku&amp;#39;&lt;/span&gt;
&lt;span class='n'&gt;gem&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;shotgun&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='ss'&gt;:group&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='ss'&gt;:development&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That&amp;#8216;s it! Now you can &lt;pre&gt;
  &gt; heroku create &amp;lt;blog name&amp;gt;
  &gt; git push heroku
&lt;/pre&gt; and go view your Jekyll blog running on Heroku!&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Joining Heroku</title>
   <link href="http://chriscontinanza.com/2011/06/11/Heroku.html"/>
   <updated>2011-06-11T00:00:00-07:00</updated>
   <id>http://chriscontinanza.com/2011/06/11/Heroku</id>
   <content type="html">&lt;h1 id='joining_heroku'&gt;Joining Heroku&lt;/h1&gt;

&lt;p&gt;Now that I&amp;#8216;ve &lt;a href='http://www.youtube.com/watch?v=Ryicgd_hJ44'&gt;crossed all the ts and dotted all the lower case js&lt;/a&gt; I can let everyone know: I&amp;#8216;m going to be working at &lt;a href='http://www.heroku.com'&gt;Heroku&lt;/a&gt; starting this July!&lt;/p&gt;

&lt;p&gt;I&amp;#8216;m very excited about this opportunity. There is so much to learn and also so much work to do making Heroku the world-class plaftorm that it is. I&amp;#8216;m going to be on the add-ons team, building out the functionality and interfaces that some of you will be using to provide your own services to Heroku customers. The add-ons are like an app marketplace &amp;#8211; allowing your web app to consume other cloud services through Heroku.&lt;/p&gt;

&lt;p&gt;I think Heroku&amp;#8216;s newest iteration, the &amp;#8220;Cedar&amp;#8221; stack, is the quantum leap forward for not merely hosting a web application, but allowing it to dynamically scale. The first iterations of the Heroku Platform ironed out deploying a Rails app to the cloud. With Cedar, we&amp;#8216;re working towards running any unix process with the same simplicity and scalability as our current applications.&lt;/p&gt;

&lt;p&gt;That said, I&amp;#8216;ve begun putting my money where my mouth is and have started transitioning my sites to Heroku. &lt;a href='http://chriscontinanza.heroku.com/2011/06/15/Jekyll-to-heroku.html'&gt;First off, this site!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Stay tuned because in the meantime I will be posting an add-on I built to github after I get it up and running on Heroku&amp;#8216;s Cedar Platform!&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Introducing IMGKit</title>
   <link href="http://chriscontinanza.com/2010/12/12/Introding-IMGKit.html"/>
   <updated>2010-12-12T00:00:00-08:00</updated>
   <id>http://chriscontinanza.com/2010/12/12/Introding-IMGKit</id>
   <content type="html">&lt;h1 id='introducing_imgkit'&gt;Introducing IMGKit&lt;/h1&gt;

&lt;p&gt;I recently discovered JD Pace&amp;#8217;s &lt;a href='http://github.com/jdpace/PDFKit'&gt;PDFKit&lt;/a&gt; in the search for better ways to do things. It&amp;#8217;s a great solution for generating PDF files from html sources. It is basically a wrapper for the open source executable &lt;a href='http://code.google.com/p/wkhtmltopdf/'&gt;wkhtmltopdf&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The idea behind &lt;code&gt;wkhtmltopdf&lt;/code&gt; is simple: use the rendering engine of browser without the GUI to generate PDFs and you&amp;#8217;ll have pages that look exactly like they render on the web and get updated when the browsers do!&lt;/p&gt;

&lt;p&gt;That in mind, I set forth to tackle a new requirement for a task at hand: turning an HTML page into a JPG. With my PDFKit hammer at my side, I quickly strung together a processing pipeline that used PDFKit to transform my html to a PDF and then RMagick to transmogrify the PDF into JPG. I looked something like this:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='ruby'&gt;    &lt;span class='n'&gt;pdf&lt;/span&gt;  &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='no'&gt;PDFKit&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;new&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;html&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='ss'&gt;:page_size&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;Letter&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;to_pdf&lt;/span&gt;
    &lt;span class='n'&gt;gif&lt;/span&gt;  &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='ss'&gt;Magick&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='ss'&gt;:Image&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;from_blob&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;pdf&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Simple, for sure. But it looked like SHIT. Back to the drawing board. A big problem was all the fine text was illegible. Imagemagick seemed to be doing a bad job of rasterizing the text getting produced in the PDF. I reasoned that perhaps I could find a flag in wkhtmltopdf to rasterize the text. Instead, I found something better. Something much better&amp;#8230;&lt;/p&gt;

&lt;h2 id='wkhtmltoimage'&gt;wkhtmltoimage&lt;/h2&gt;

&lt;p&gt;It turns out wkhtmlto&lt;b&gt;image&lt;/b&gt; does for JPGs what wkthmlto&lt;b&gt;pdf&lt;/b&gt; does for PDFs. Woot! Like any good hacker, I first decided to try to screw around with the PDFKit gem, swapping out the call to wkhtmltopdf with one to wkhtmltoimage.&lt;/p&gt;

&lt;p&gt;As that broke, it lead me to try to just call the command on my own, which eventually lead to discovering this little gem of Ruby in PDFKit:&lt;/p&gt;

&lt;h2 id='stdin_and_stdout_and_stderr_oh_my'&gt;stdin and stdout and stderr, oh my!&lt;/h2&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='ruby'&gt;    &lt;span class='n'&gt;pdf&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='no'&gt;Kernel&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;open&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;|-&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;w+&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
    &lt;span class='nb'&gt;exec&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;command&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='n'&gt;pdf&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;nil?&lt;/span&gt;
    &lt;span class='n'&gt;pdf&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;puts&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='vi'&gt;@source&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;to_s&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='vi'&gt;@source&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;html?&lt;/span&gt;
    &lt;span class='n'&gt;pdf&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;close_write&lt;/span&gt;
    &lt;span class='n'&gt;result&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;pdf&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;gets&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kp'&gt;nil&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
    &lt;span class='n'&gt;pdf&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;close_read&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;a href='http://ruby-doc.org/core/classes/Kernel.html#M005950'&gt;It turns out you can open a pipe with `Kernel#open`&lt;/a&gt;
&lt;p&gt;that you can read and write to like a file! Moments like this make me really appreciate the power of the &amp;#8216;file&amp;#8217; abstraction.&lt;/p&gt;

&lt;p&gt;If you pass &lt;code&gt;Kernel#open&lt;/code&gt; &lt;code&gt;&amp;#39;|&amp;amp;lt;cmdname&amp;amp;gt;&amp;#39;&lt;/code&gt;, you will have a pipe to that command that you can read and write to with normal &lt;code&gt;IO&lt;/code&gt; methods, such as &lt;code&gt;#gets&lt;/code&gt;, &lt;code&gt;#puts&lt;/code&gt;, and my favorite &lt;code&gt;#&amp;amp;lt;&amp;amp;lt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you pass &lt;code&gt;Kernel#open&lt;/code&gt; the special string &lt;code&gt;'|-'&lt;/code&gt;, not only do you get back a pipe, &lt;em&gt;but the process forks,&lt;/em&gt; returning nil to the child and the file-like pipe &lt;code&gt;IO&lt;/code&gt; Object to the parent. That&amp;#8217;s a pretty elegant way to wrap a process and that&amp;#8217;s how the &lt;code&gt; exec(&amp;ast;command) if pdf.nil? &lt;/code&gt; line works.&lt;/p&gt;

&lt;p&gt;The command we are wrapping is &lt;code&gt;wkhtmltoimage&lt;/code&gt;, which takes two inputs: the source and ouptut destination. It can take a url, file location, or stdin as input if you pass the special parameter &amp;#8216;-&amp;#8216;. Output can either be a file or standard out if you use the same &amp;#8216;-&amp;#8216;. In this situation, we&amp;#8217;re always reading from standard out, which is accomplished via the call to &lt;code&gt;result = pdf.gets(nil)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This may make it more clear:&lt;/p&gt;

&lt;h2 id='in_ruby_files_can_be_pipes'&gt;in Ruby, files can be pipes&amp;#8230;&lt;/h2&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='ruby'&gt;    &lt;span class='n'&gt;pipe&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='no'&gt;Kernel&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;open&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;|-&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;w+&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
    &lt;span class='nb'&gt;exec&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;command&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='n'&gt;pipe&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;nil?&lt;/span&gt;
    &lt;span class='n'&gt;pipe&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;puts&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='vi'&gt;@source&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;to_s&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='vi'&gt;@source&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;html?&lt;/span&gt;
    &lt;span class='n'&gt;pipe&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;close_write&lt;/span&gt;
    &lt;span class='n'&gt;result&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;pipe&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;gets&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kp'&gt;nil&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
    &lt;span class='n'&gt;pipe&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;close_read&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So I got to quick work writing my own script that just called wkhtmltoimage with this bit of code. However, I quickly found out &lt;code&gt;wkthmltoimage&lt;/code&gt; does not support the &lt;code&gt;--quiet&lt;/code&gt; flag, which leads to a leaky standard error printing out the the console. This is something that is very noticable during unit testing and is just a bad form and practice to not manage right.&lt;/p&gt;

&lt;h2 id='standard_error_you_bastard'&gt;Standard error, you bastard!&lt;/h2&gt;

&lt;p&gt;PDFKit is able to pass the &lt;code&gt;--quiet&lt;/code&gt; flag to &lt;code&gt;wkhtmltopdf&lt;/code&gt; to silence standard error; &lt;code&gt;wkhtmltoimage&lt;/code&gt; has no such flag. Using redirection is one way out and works fine when passing the command as a string to exec, a la &lt;code&gt;&amp;quot;wkhtmltoimage - - 2&amp;amp;/dev/null&amp;quot;&lt;/code&gt;. However, this fails when using the splat operator on an array of built up parameters (ie: &lt;code&gt;exec(&amp;ast;command)&lt;/code&gt;). It turns out Ruby has another way to call a process that, while not as terse as the above, does the job:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='ruby'&gt;    &lt;span class='n'&gt;result&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='kp'&gt;nil&lt;/span&gt;
    &lt;span class='no'&gt;Open3&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;popen3&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;command&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='k'&gt;do&lt;/span&gt; &lt;span class='o'&gt;|&lt;/span&gt;&lt;span class='n'&gt;stdin&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='n'&gt;stdout&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='n'&gt;stderr&lt;/span&gt;&lt;span class='o'&gt;|&lt;/span&gt;
      &lt;span class='n'&gt;stdin&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='vi'&gt;@source&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;to_s&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='vi'&gt;@source&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;html?&lt;/span&gt;
      &lt;span class='n'&gt;stdin&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;close&lt;/span&gt;
      &lt;span class='n'&gt;result&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;stdout&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;gets&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kp'&gt;nil&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
      &lt;span class='n'&gt;stdout&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;close&lt;/span&gt;
      &lt;span class='n'&gt;stderr&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;close&lt;/span&gt;
    &lt;span class='k'&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Open3#open3&lt;/code&gt; allows you to explicitly manage standard input, output, and error of the child process command. Since we&amp;#8217;re not really interested in what it has to say, we just close it when we&amp;#8217;re done reading the jpg on &lt;code&gt;stdout&lt;/code&gt;. The call to exec in the &lt;code&gt;Kernel#open&lt;/code&gt; method does not provide a way to manage the output of standard error in the child process, so it winds up connected to the parent&amp;#8217;s standard error.&lt;/p&gt;

&lt;h2 id='rolling_my_own'&gt;Rolling my own&lt;/h2&gt;

&lt;p&gt;Eventually I made enough changes to PDFKit to warrant creating my own library I am calling IMGKit, which I am proud to announce is available via:&lt;/p&gt;
&lt;code&gt;gem install imgkit&lt;/code&gt;
&lt;p&gt;You can then create JPGs from HTML files with:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='ruby'&gt;    &lt;span class='nb'&gt;require&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;imgkit&amp;#39;&lt;/span&gt;
    &lt;span class='n'&gt;kit&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='no'&gt;IMGKit&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;new&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;html&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='ss'&gt;:quality&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='mi'&gt;50&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;

    &lt;span class='c1'&gt;# Get the image BLOB&lt;/span&gt;
    &lt;span class='n'&gt;img&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;kit&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;to_img&lt;/span&gt;

    &lt;span class='c1'&gt;# Save to a file&lt;/span&gt;
    &lt;span class='n'&gt;file&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;kit&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;to_file&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;/path/to/save/file2.jpg&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
    &lt;span class='c1'&gt;# or&lt;/span&gt;
    &lt;span class='no'&gt;File&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;open&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;/path/to/save/file1.jpg&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt; &lt;span class='o'&gt;|&lt;/span&gt;&lt;span class='n'&gt;f&lt;/span&gt;&lt;span class='o'&gt;|&lt;/span&gt; &lt;span class='n'&gt;f&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class='n'&gt;kit&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;to_img&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt;

    &lt;span class='c1'&gt;# send to browser (Rails - use with #caches_page)&lt;/span&gt;
    &lt;span class='n'&gt;send_data&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;kit&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;to_img&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='ss'&gt;:type&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;image/jpeg&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='ss'&gt;:disposition&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;inline&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Code is available on &lt;a href='http://github.com/csquared/IMGKit'&gt;github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Oh, and this is my first gem! Enjoy!!&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Permutations and Combinations with Ruby's Array</title>
   <link href="http://chriscontinanza.com/2010/10/29/Array.html"/>
   <updated>2010-10-29T00:00:00-07:00</updated>
   <id>http://chriscontinanza.com/2010/10/29/Array</id>
   <content type="html">&lt;h1 id='permutations_and_combinations_with_rubys_array'&gt;Permutations and Combinations with Ruby&amp;#8217;s Array&lt;/h1&gt;

&lt;p&gt;So I&amp;#8217;ve been having fun &lt;a href='http://github.com/csquared/NQueens'&gt;resurrecting code from my past&lt;/a&gt; to help me with the work I&amp;#8217;m doing today, which is pretty awesome.&lt;/p&gt;

&lt;p&gt;But you know what&amp;#8217;s even more Aweseome? Ruby&amp;#8217;s Array class. It&amp;#8217;s gotten two new methods since 1.8.6 that do some nifty, mathy things: #permutation and #combination.&lt;/p&gt;

&lt;p&gt;Permutations and combintations are both ways of constructing sets from a single group of primitives. You may remember something along the lines of &amp;#8220;N choose K&amp;#8221;.&lt;/p&gt;

&lt;p&gt;From N items, you can choose K of those items. If order matters in the groups you are making then you are choosing &lt;b&gt;permutations&lt;/b&gt;. If order does not matter, then you are choosing &lt;b&gt;combinations&lt;/b&gt;. In cases larger than 1, there will always be more permutations than combinations.&lt;/p&gt;

&lt;p&gt;The formula for permutations is as follows:&lt;/p&gt;

&lt;p&gt;&lt;img alt='permutations' src='/images/permutations.png' /&gt;&lt;/p&gt;

&lt;p&gt;However, I&amp;#8217;ve always found the easiest way to think of permutations in terms of an empty array that you&amp;#8217;re filling with elements:&lt;/p&gt;
&lt;table class='array'&gt;
  &lt;tr&gt;
    &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;td&gt;&amp;nbsp;&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Let&amp;#8217;s take the full example of having 10 items and wanting permutations that have a size of 10. So we&amp;#8217;d say this is &amp;#8220;10 choose 10&amp;#8221;, initializing our variables N and K to 10. When we go to fill up the first spot in the array, we have all 10 items to pick from.&lt;/p&gt;
&lt;table class='array'&gt;
  &lt;tr&gt;
    &lt;td style='width:10%'&gt;1 of 10&lt;/td&gt;
    &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;td&gt;&amp;nbsp;&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Now when we go to fill up the second spot, we one have 9 elements to choose from, so we&amp;#8217;re picking 1 from the 9 remaining.&lt;/p&gt;
&lt;table class='array'&gt;
  &lt;tr&gt;
    &lt;td style='width:10%'&gt;1 of 10&lt;/td&gt;
    &lt;td style='width:10%'&gt;1 of 9&lt;/td&gt;
    &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;td&gt;&amp;nbsp;&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;To tally the grand total number of choices I can simply multiply 10 x 9 to arrive at 90. That is because choosing 2 then 1 is different from choosing 1 then 2, and it actually makes the math easier. This process continues:&lt;/p&gt;
&lt;table class='array'&gt;
  &lt;tr&gt;
    &lt;td style='width:10%'&gt;1 of 10&lt;/td&gt;
    &lt;td style='width:10%'&gt;1 of 9&lt;/td&gt;
    &lt;td style='width:10%'&gt;1 of 8&lt;/td&gt;
    &lt;td style='width:10%'&gt;1 of 7&lt;/td&gt;
    &lt;td style='width:10%'&gt;1 of 6&lt;/td&gt;
    &lt;td style='width:10%'&gt;1 of 5&lt;/td&gt;
    &lt;td style='width:10%'&gt;1 of 4&lt;/td&gt;
    &lt;td style='width:10%'&gt;1 of 3&lt;/td&gt;
    &lt;td style='width:10%'&gt;1 of 2&lt;/td&gt;
    &lt;td style='width:10%'&gt;1 of 1&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;As you can see, you just keep multiplying N by N-1. This is why, for the special case where N=k, the total number of permutations is N!, or N factorial. For any cases smaller than that, you wind up with &amp;#8220;just the head&amp;#8221; of the factorial bit. For example, in 10 choose 4 you are only doing the following:&lt;/p&gt;
&lt;table class='array'&gt;
  &lt;tr&gt;
    &lt;td style='width:10%'&gt;1 of 10&lt;/td&gt;
    &lt;td style='width:10%'&gt;1 of 9&lt;/td&gt;
    &lt;td style='width:10%'&gt;1 of 8&lt;/td&gt;
    &lt;td style='width:10%'&gt;1 of 7&lt;/td&gt;
    &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;td&gt;&amp;nbsp;&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;For me, the trick to understanding the formula is realizing what it is doing in the denominator is cancelling out the tail of 6 x 5 x 4 x 3&amp;#8230; We know to start at six either by making my table above or using the formula to calulate N-K, which in this case is 10-4 = 6.&lt;/p&gt;

&lt;p&gt;Combinations are like permutations, but order doesn&amp;#8217;t matter. The formula is very similar:&lt;/p&gt;

&lt;p&gt;&lt;img alt='combinations' src='http://upload.wikimedia.org/math/1/9/2/1928f752016eeb2c94f27269a14f7f47.png' /&gt;&lt;/p&gt;

&lt;p&gt;In fact, you can think of this as being the same process as permutations, but needing that k! in the denominator to cancel out subsets that already exist.&lt;/p&gt;

&lt;p&gt;If you&amp;#8217;re going to be using permutations and combinations in your code, its important to be able to calculate the size without needing to generate all the options because it can quickly overwhelm your computer.&lt;/p&gt;

&lt;h1 id='back_of_the_envelope'&gt;Back of the envelope:&lt;/h1&gt;
&lt;pre&gt;
2&lt;sup&gt;10&lt;/sup&gt; = 1024
10! = 3,628,800

2&lt;sup&gt;100&lt;/sup&gt; = 1.2 x 10&lt;sup&gt;30&lt;/sup&gt;
100! = 9.3 x 10&lt;sup&gt;157&lt;/sup&gt;
&lt;/pre&gt;
&lt;p&gt;That said, let&amp;#8217;s take a look at how Ruby makes using permutations and combintations in your code deceptively simple:&lt;/p&gt;

&lt;h2 id='arraypermutation'&gt;Array#permutation&lt;/h2&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='ruby'&gt;   &lt;span class='n'&gt;a&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;3&lt;/span&gt;&lt;span class='o'&gt;]&lt;/span&gt;
   &lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;permutation&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;to_a&lt;/span&gt;
      &lt;span class='o'&gt;[[&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='mi'&gt;3&lt;/span&gt;&lt;span class='o'&gt;]&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='mi'&gt;3&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='o'&gt;]&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='mi'&gt;3&lt;/span&gt;&lt;span class='o'&gt;]&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='mi'&gt;3&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='o'&gt;]&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='mi'&gt;3&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='o'&gt;]&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='mi'&gt;3&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='o'&gt;]]&lt;/span&gt;
   &lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;permutation&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;to_a&lt;/span&gt;
      &lt;span class='o'&gt;[[&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='o'&gt;]&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='o'&gt;]&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='mi'&gt;3&lt;/span&gt;&lt;span class='o'&gt;]]&lt;/span&gt;
   &lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;permutation&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;to_a&lt;/span&gt;
      &lt;span class='o'&gt;[[&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='o'&gt;]&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='mi'&gt;3&lt;/span&gt;&lt;span class='o'&gt;]&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='o'&gt;]&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='mi'&gt;3&lt;/span&gt;&lt;span class='o'&gt;]&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='mi'&gt;3&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='o'&gt;]&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='mi'&gt;3&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='o'&gt;]]&lt;/span&gt;
   &lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;permutation&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='mi'&gt;3&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;to_a&lt;/span&gt;
      &lt;span class='o'&gt;[[&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='mi'&gt;3&lt;/span&gt;&lt;span class='o'&gt;]&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='mi'&gt;3&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='o'&gt;]&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='mi'&gt;3&lt;/span&gt;&lt;span class='o'&gt;]&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='mi'&gt;3&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='o'&gt;]&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='mi'&gt;3&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='o'&gt;]&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='mi'&gt;3&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='o'&gt;]]&lt;/span&gt;
   &lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;permutation&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;to_a&lt;/span&gt;
    &lt;span class='o'&gt;[[]]&lt;/span&gt; &lt;span class='c1'&gt;# one permutation of length 0&lt;/span&gt;
   &lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;permutation&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='mi'&gt;4&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;to_a&lt;/span&gt;
    &lt;span class='o'&gt;[]&lt;/span&gt;   &lt;span class='c1'&gt;# no permutations of length 4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id='arraycombination'&gt;Array#combination&lt;/h2&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='ruby'&gt;  &lt;span class='n'&gt;a&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;3&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;4&lt;/span&gt;&lt;span class='o'&gt;]&lt;/span&gt;
  &lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;combination&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;to_a&lt;/span&gt;
    &lt;span class='o'&gt;[[&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='o'&gt;]&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='o'&gt;]&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='mi'&gt;3&lt;/span&gt;&lt;span class='o'&gt;]&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='mi'&gt;4&lt;/span&gt;&lt;span class='o'&gt;]]&lt;/span&gt;
  &lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;combination&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;to_a&lt;/span&gt;
    &lt;span class='o'&gt;[[&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='o'&gt;]&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='mi'&gt;3&lt;/span&gt;&lt;span class='o'&gt;]&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='mi'&gt;4&lt;/span&gt;&lt;span class='o'&gt;]&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='mi'&gt;3&lt;/span&gt;&lt;span class='o'&gt;]&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='mi'&gt;4&lt;/span&gt;&lt;span class='o'&gt;]&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='mi'&gt;3&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='mi'&gt;4&lt;/span&gt;&lt;span class='o'&gt;]]&lt;/span&gt;
  &lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;combination&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='mi'&gt;3&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;to_a&lt;/span&gt;
    &lt;span class='o'&gt;[[&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='mi'&gt;3&lt;/span&gt;&lt;span class='o'&gt;]&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='mi'&gt;4&lt;/span&gt;&lt;span class='o'&gt;]&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='mi'&gt;3&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='mi'&gt;4&lt;/span&gt;&lt;span class='o'&gt;]&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='mi'&gt;3&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='mi'&gt;4&lt;/span&gt;&lt;span class='o'&gt;]]&lt;/span&gt;
  &lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;combination&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='mi'&gt;4&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;to_a&lt;/span&gt;
    &lt;span class='o'&gt;[[&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='mi'&gt;3&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='mi'&gt;4&lt;/span&gt;&lt;span class='o'&gt;]]&lt;/span&gt;
  &lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;combination&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;to_a&lt;/span&gt;
    &lt;span class='o'&gt;[[]]&lt;/span&gt; &lt;span class='c1'&gt;# one combination of length 0&lt;/span&gt;
  &lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;combination&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='mi'&gt;5&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;to_a&lt;/span&gt;
    &lt;span class='o'&gt;[]&lt;/span&gt;   &lt;span class='c1'&gt;# no combinations of length 5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For reference&amp;#8217;s sake I&amp;#8217;ve included the implementation of permute0, which does the permutation calculation. This is implemented in array.c of Ruby recursively. Combination, however, is generated iteratively. In large cases this can impact the performance of these two functions.&lt;/p&gt;

&lt;p&gt;In production code, I&amp;#8217;d say the best place to use these is not going to be in some sort of AI subsystem, but most likely with a small set where its more expressive to generate permutations/combintations instead of listing them.&lt;/p&gt;

&lt;h2 id='appendix_a_permute0_in_arrayc'&gt;Appendix A: permute0 in array.c&lt;/h2&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='c'&gt;&lt;span class='cm'&gt;/*&lt;/span&gt;
&lt;span class='cm'&gt; * Recursively compute permutations of r elements of the set [0..n-1].&lt;/span&gt;
&lt;span class='cm'&gt; * When we have a complete permutation of array indexes, copy the values&lt;/span&gt;
&lt;span class='cm'&gt; * at those indexes into a new array and yield that array.&lt;/span&gt;
&lt;span class='cm'&gt; *&lt;/span&gt;
&lt;span class='cm'&gt; * n: the size of the set&lt;/span&gt;
&lt;span class='cm'&gt; * r: the number of elements in each permutation&lt;/span&gt;
&lt;span class='cm'&gt; * p: the array (of size r) that we&amp;#39;re filling in&lt;/span&gt;
&lt;span class='cm'&gt; * index: what index we&amp;#39;re filling in now&lt;/span&gt;
&lt;span class='cm'&gt; * used: an array of booleans: whether a given index is already used&lt;/span&gt;
&lt;span class='cm'&gt; * values: the Ruby array that holds the actual values to permute&lt;/span&gt;
&lt;span class='cm'&gt; */&lt;/span&gt;
&lt;span class='k'&gt;static&lt;/span&gt; &lt;span class='kt'&gt;void&lt;/span&gt;
&lt;span class='n'&gt;permute0&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;n&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;r&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;p&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;index&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;used&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;values&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
    &lt;span class='kt'&gt;long&lt;/span&gt; &lt;span class='n'&gt;n&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;r&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;p&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;index&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
    &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;used&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
    &lt;span class='n'&gt;VALUE&lt;/span&gt; &lt;span class='n'&gt;values&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='p'&gt;{&lt;/span&gt;
    &lt;span class='kt'&gt;long&lt;/span&gt; &lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
    &lt;span class='k'&gt;for&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='n'&gt;i&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&lt;/span&gt; &lt;span class='n'&gt;n&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='o'&gt;++&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
      &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;used&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
          &lt;span class='n'&gt;p&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;index&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
          &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;index&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&lt;/span&gt; &lt;span class='n'&gt;r&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;             &lt;span class='cm'&gt;/* if not done yet */&lt;/span&gt;
              &lt;span class='n'&gt;used&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;               &lt;span class='cm'&gt;/* mark index used */&lt;/span&gt;
              &lt;span class='n'&gt;permute0&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;n&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;r&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;p&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;index&lt;/span&gt;&lt;span class='o'&gt;+&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='cm'&gt;/* recurse */&lt;/span&gt;
              &lt;span class='n'&gt;used&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;values&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
              &lt;span class='n'&gt;used&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;               &lt;span class='cm'&gt;/* index unused */&lt;/span&gt;
          &lt;span class='p'&gt;}&lt;/span&gt;
          &lt;span class='k'&gt;else&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
            &lt;span class='cm'&gt;/* We have a complete permutation of array indexes */&lt;/span&gt;
            &lt;span class='cm'&gt;/* Build a ruby array of the corresponding values */&lt;/span&gt;
            &lt;span class='cm'&gt;/* And yield it to the associated block */&lt;/span&gt;
            &lt;span class='n'&gt;VALUE&lt;/span&gt; &lt;span class='n'&gt;result&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;rb_ary_new2&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;r&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
            &lt;span class='n'&gt;VALUE&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;result_array&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;RARRAY&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;result&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='n'&gt;ptr&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
            &lt;span class='k'&gt;const&lt;/span&gt; &lt;span class='n'&gt;VALUE&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;values_array&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;RARRAY&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;values&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='n'&gt;ptr&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;

            &lt;span class='k'&gt;for&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;j&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='n'&gt;j&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&lt;/span&gt; &lt;span class='n'&gt;r&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='o'&gt;++&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='n'&gt;result_array&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;values_array&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;p&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='p'&gt;]];&lt;/span&gt;
            &lt;span class='n'&gt;RARRAY&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;result&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='n'&gt;len&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;r&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
            &lt;span class='n'&gt;rb_yield&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;result&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
         &lt;span class='p'&gt;}&lt;/span&gt;
      &lt;span class='p'&gt;}&lt;/span&gt;
    &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
 </entry>
 
 <entry>
   <title>Hello, strace (an introduction to strace)</title>
   <link href="http://chriscontinanza.com/2010/09/19/Hello-strace.html"/>
   <updated>2010-09-19T00:00:00-07:00</updated>
   <id>http://chriscontinanza.com/2010/09/19/Hello-strace</id>
   <content type="html">&lt;h1 id='hello_strace_an_introduction_to_strace'&gt;Hello, strace (an introduction to strace)&lt;/h1&gt;

&lt;p&gt;If you haven&amp;#8217;t seen it, &lt;a href='http://vimeo.com/12748731'&gt;check out Aman Gupta&amp;#8217;s talk on using C tools to debug ruby&lt;/a&gt;. After watching this talk, I was all fired up to use strace to shed light on just exactly what&amp;#8217;s going on when I&amp;#8217;m running Ruby code.&lt;/p&gt;

&lt;h2 id='strace'&gt;strace&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;strace [ -dffhiqrtttTvxx ]  ...  [ -ofile ] [ -ppid ] ... [ command [ arg ...  ] ]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;strace is a tool that traces the system calls (those are calls made to the kernel) a specific process is making. Remember in unix-world, every system call is implemented as a function in C. strace allows you to see how your program is interacting with the operating system.&lt;/p&gt;

&lt;p&gt;From the man pages: &lt;blockquote&gt;
In the simplest case strace runs the specified command until it exits.
It intercepts and records the system calls which are called by a process
and the signals  which  are  received  by a process.  The name of each system
call, its arguments and its return value are printed on standard error or to the file
specified with the -o option.
&lt;/blockquote&gt;&lt;/p&gt;

&lt;p&gt;So let&amp;#8217;s start with the simplest of cases.&lt;/p&gt;

&lt;p&gt;What we&amp;#8217;re going to do is run a Ruby hello world and a C hello world under strace so we can compare the output and get a feel for whats going on under the hood.&lt;/p&gt;

&lt;h2 id='hello_strace'&gt;Hello, strace.&lt;/h2&gt;

&lt;p&gt;To strace Ruby&amp;#8217;s hello world, we&amp;#8217;re going to take advantage of the -e flag. e means &amp;#8220;Evaluate&amp;#8221; and it tells the ruby interpreter you want it to eval the string you are passing to it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ strace -o ruby_strace ruby -e &amp;#39;puts &amp;quot;hello, world&amp;quot;&amp;#39;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href='http://github.com/csquared/mojombo.github.com/blob/master/_posts/strace/ruby_strace.log'&gt;This log is about 130 lines, so I&amp;#8217;ve added some commentsas to what&amp;#8217;s going on.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here&amp;#8217;s our C version of the same program.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@@@c
#include &amp;lt;stdio.h&amp;gt;
main() {
  printf(&amp;quot;Hello, world&amp;quot;);
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Oooh exciting.&lt;/p&gt;

&lt;p&gt;now for a little&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ gcc c_hw.c -o chw
$ strace chw -o c_strace.log&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And boo-ya!&lt;/p&gt;

&lt;p&gt;&lt;a href='http://github.com/csquared/mojombo.github.com/blob/master/_posts/strace/c_strace.log'&gt;The strace is a lot shorter, like 100 lines shorter.&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id='so_whats_going_on'&gt;So what&amp;#8217;s going on?&lt;/h2&gt;

&lt;p&gt;First off, you can find all of the lines in the C program show up somehow or another in the ruby program, in three distinct chunks. In the end, the entirety of both programs boils down to one system call to write:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;write(1, &amp;quot;Hello, world&amp;quot;, 12)             = 12&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which is writing our beloved Hello, world to file descriptor 1- better known as standard output. What&amp;#8217;s going on differently in the Ruby version is that the Ruby version has to load Ruby. Ruby then registers some interrupt handlers, seeds its random key, queries the process about its ids and goes along its merry way.&lt;/p&gt;

&lt;p&gt;Only to wind up with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;write(1, &amp;quot;hello, world\n&amp;quot;, 13)             = 13&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yup, that&amp;#8217;s the same instruction. &lt;em&gt;As it should be.&lt;/em&gt; Ok. Not totally the same. I used Ruby&amp;#8217;s &lt;em&gt;puts&lt;/em&gt; method, which post-pends a newline to the string. This explains the difference between the 12 and 13 number of characters.&lt;/p&gt;

&lt;p&gt;Nevertheless, the basic idea is that Ruby does everything the C program does plus loading all the parts that are simply Ruby.&lt;/p&gt;

&lt;p&gt;Since we&amp;#8217;re all Visual learners:&lt;/p&gt;
&lt;img src='/images/strace_img.jpg' /&gt;
&lt;p&gt;Because this is a trivial example, loading up Ruby seems like a lot of work. That&amp;#8217;s just because the point of this excercise is to show the relationship between what Ruby is doing and what the equivalent C program would do.&lt;/p&gt;

&lt;p&gt;Just one line of ruby generated ~100 lines of strace. That&amp;#8217;s a lot going on for just one line of code, so to do more beyond this &lt;a href='http://xkcd.com/208/'&gt;we must harness the secret power of regular expressions.&lt;/a&gt; There are many more tools to cover, but strace teamed up with grep (or ack) is one of those power combos no programmer should be without.&lt;/p&gt;

&lt;p&gt;For a real gas try:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ strace irb&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And just type &amp;#8220;hello, world.&amp;#8221; Welcome to the interactive strace!&lt;/p&gt;</content>
 </entry>
 
 
</feed>
